Microsoft (R) Macro Assembler Version 14.14.26429.4	    12/17/18 12:20:57
U10516045_ch10_1.asm					     Page 1 - 1


				.386
				.model flat, stdcall
				.stack 4096
				ExitProcess proto, dwExitCode:dword
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .MODEL flat, stdcall
C:\Irvine\SmallWin.inc(11) : warning A4011:multiple .MODEL directives found : .MODEL ignored
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE test.inc
			      C COMMENT !
			      C ; (Macros.inc) - Include file containing Macros
			      C ; for Assembly Language for Intel-Based Computers
			      C ; 7th Edition, by Kip Irvine. Copyright 2014, Prentice-Hall Inc,
			      C ; all rights reserved.
			      C ;
			      C ; Update history:
			      C ; 1/1/2014 - Revised for 7th Edition
			      C 
			      C ; List of macros in this file:
			      C 
			      C mChoose MACRO MAX:REQ
			      C 
			      C mDump MACRO varName:REQ, useLabel
			      C 	-- Displays a variable, using its name and default attributes.
			      C 	-- useLabel is optional; if nonblank, the variable name will be displayed
			      C 	--    just before the dump.
			      C 
			      C mDumpMem MACRO address:REQ, itemCount:REQ, componentSize:REQ
			      C 	-- Displays a dump of a range of memory.
			      C 
			      C mGotoxy MACRO X:REQ, Y:REQ
			      C 	-- Sets the cursor position.
			      C 
			      C mReadString MACRO varName:REQ
			      C 	-- Reads a string from the keyboard.
			      C 
			      C mShow MACRO itsName:REQ, format:=<HIN>
			      C 	-- Displays a variable or register in various formats.
			      C 
			      C mShowRegister MACRO regName, regValue
			      C 	-- Displays a 32-bit register name and contents in hexadecimal.
			      C 
			      C mWrite MACRO text:REQ
			      C 	-- Writes a string literal to standard output.
			      C 
			      C mWriteLn MACRO text:REQ
			      C 	-- Writes a string literal to standard output.  *** DEPRECATED in 5th Edition ***
			      C 
			      C mWriteSpace MACRO count
			      C 	-- Writes one or more spaces to the console window.
			      C 	-- <count> is optional
			      C 
			      C mWriteString MACRO buffer:REQ
			      C 	-- Writes a string variable's contents to the console window.
			      C 
			      C 
			      C 
			      C END COMMENT ***************************************** !
			      C 
			      C ; Introduced in Chapter 10 as an example of a Macro function.
			      C 
			      C IsDefined MACRO symbol
			      C     IFDEF symbol
			      C         EXITM <-1>              ; True
			      C     ELSE
			      C         EXITM <0>               ; False
			      C     ENDIF
			      C ENDM
			      C 
			      C ;----------------------------------------------------
			      C mDump MACRO varName:REQ, useLabel
			      C ;
			      C ; Displays a variable, using its known attributes
			      C ; Receives: varName, the name of a variable.
			      C ;    If useLabel is nonblank, the name of the
			      C ;    variable is displayed.
			      C ;----------------------------------------------------
			      C 	call Crlf
			      C 	IFNB <useLabel>
			      C 	  mWrite "Variable name: &varName"
			      C 	ELSE
			      C 	  mWrite " "
			      C 	ENDIF
			      C 	mDumpMem OFFSET varName, LENGTHOF varName, TYPE varName
			      C ENDM
			      C 
			      C ;------------------------------------------------------
			      C mDumpMem MACRO address:REQ, itemCount:REQ, componentSize:REQ
			      C ;
			      C ; Receives: memory offset, count of the number of items
			      C ;   to display, and the size of each memory component.
			      C ; Avoid passing EBX, ECX, and ESI as arguments.
			      C ;------------------------------------------------------
			      C 	push	ebx
			      C 	push	ecx
			      C 	push	esi
			      C 	mov	esi,address
			      C 	mov	ecx,itemCount
			      C 	mov	ebx,componentSize
			      C 	call	DumpMem
			      C 	pop	esi
			      C 	pop	ecx
			      C 	pop	ebx
			      C ENDM
			      C 
			      C mChoose MACRO MAX:REQ
			      C MC1:
			      C 	call Crlf
			      C 	mWrite "½Ð¿é¤J¿ï¾Ü: "
			      C 	mov eax, 0
			      C 	call ReadChar
			      C 	call WriteChar
			      C 	sub al, 30h
			      C 	.IF al == 0 || al > MAX
			      C 		mWrite "    Wrong selection"
			      C 		jmp MC1
			      C 	.ENDIF
			      C ENDM
			      C 
			      C ;------------------------------------------------------
			      C mGotoxy MACRO X:REQ, Y:REQ
			      C ;  
			      C ; Sets the cursor position. 
			      C ; Receives: X and Y coordinates (type BYTE). Avoid 
			      C ;    passing DH and DL as arguments.
			      C ;------------------------------------------------------
			      C 	push edx
			      C 	mov  dh,Y
			      C 	mov  dl,X
			      C 	call Gotoxy
			      C 	pop  edx
			      C ENDM
			      C 
			      C ;------------------------------------------------------
			      C mReadString MACRO varName:REQ
			      C ;
			      C ; Reads from standard input into a buffer.
			      C ; Receives: the name of the buffer. Avoid passing 
			      C ;    ECX and EDX as arguments.
			      C ;------------------------------------------------------
			      C 	push ecx
			      C 	push edx
			      C 	mov  edx,OFFSET varName
			      C 	mov  ecx,SIZEOF varName
			      C 	call ReadString
			      C 	pop  edx
			      C 	pop  ecx
			      C ENDM
			      C 
			      C ;---------------------------------------------------
			      C mShow MACRO itsName:REQ, format:=<HIN>
			      C              LOCAL tempStr
			      C ; Displays a register's or variable's name and contents.
			      C ;
			      C ; Receives:
			      C ;	itsName is the name of a register or variable.
			      C ; 	format is an ordered string consisting of the format codes:
			      C ;	  H - hexadecimal
			      C ;	  D - unsigned decimal
			      C ;     I - signed decimal
			      C ;     B - binary
			      C ;     N - append a newline (CR/LF) (may appear multiple times)
			      C ;
			      C ; The default format is "HIN"
			      C ;
			      C ; The variable or register's value is displayed in each format,
			      C ; in the order specified by the caller, on a single output line.
			      C ; Create by Gerald Cahill and Kip Irvine.
			      C ;---------------------------------------------------
			      C .data
			      C tempStr BYTE "  &itsName = ",0
			      C .code
			      C     pushad
			      C 
			      C ;;If itsName is a register name, define its type
			      C 
			      C IF (OPATTR (itsName)) AND 00010000b ;;true if register name
			      C 
			      C   MSHOWITSNAMETYPE = 0 ;; initialize TYPE to not found
			      C 
			      C   FOR reg8,<al,ah,bl,bh,cl,ch,dl,dh>
			      C     IFIDNI <itsName>,<reg8>
			      C       MSHOWITSNAMETYPE = 1
			      C       movzx ecx,itsName  ;; get unsigned value
			      C       movsx edx,itsName  ;; get signed value
			      C     ENDIF
			      C   ENDM
			      C 
			      C   FOR reg16,<ax,bx,cx,dx,si,di,bp,sp>
			      C     IFIDNI <itsName>,<reg16>
			      C       MSHOWITSNAMETYPE = 2
			      C       movzx ecx,itsName  ;; get unsigned value
			      C       movsx edx,itsName  ;; get signed value
			      C     ENDIF
			      C   ENDM
			      C 
			      C   FOR regseg,<cs,ds,es,fs,gs,ss>
			      C     IFIDNI <itsName>,<regseg>
			      C       MSHOWITSNAMETYPE = 2
			      C       mov   ax,itsName  ;; get value into general purpose reg.
			      C       movsx edx,ax      ;; get signed value (who would want it?)
			      C       movzx ecx,ax      ;; get unsigned value
			      C     ENDIF
			      C   ENDM
			      C 
			      C   FOR reg32,<eax,ebx,ecx,edx,esi,edi,ebp,esp>
			      C     IFIDNI <itsName>,<reg32>
			      C       MSHOWITSNAMETYPE = 4
			      C       mov   ecx,itsName  ;; get unsigned value
			      C       mov   edx,itsName  ;; get signed value
			      C     ENDIF
			      C   ENDM
			      C 
			      C ELSE ;; itsName is not a register name, assume variable name
			      C 
			      C   MSHOWITSNAMETYPE = TYPE itsName
			      C   IF MSHOWITSNAMETYPE EQ 4
			      C       mov   ecx,itsName  ;; get unsigned value
			      C       mov   edx,ecx      ; get signed value
			      C   ELSE
			      C       movzx ecx,itsName  ;; get unsigned value
			      C       movsx edx,itsName  ;; get signed value
			      C   ENDIF
			      C 
			      C ENDIF ;OPATTR
			      C                          ; Display the register or variable's name
			      C     push edx
			      C     mov  edx,OFFSET tempStr
			      C     call WriteString
			      C     pop  edx
			      C 
			      C                         ; Display the register or variable's contents
			      C FORC fmt,<format>
			      C 
			      C   IFIDNI <fmt>,<H>      ;; H - write unsigned hex
			      C     mov eax,ecx         ;; get unsigned
			      C     mov ebx,MSHOWITSNAMETYPE
			      C     call WriteHexB    	;; write in hexadecimal
			      C     mWrite "h  "
			      C   ENDIF
			      C 
			      C   IFIDNI <fmt>,<D>      ;; D - write unsigned dec
			      C     mov eax,ecx         ;; get unsigned
			      C     call WriteDec
			      C     mWrite "d  "
			      C   ENDIF
			      C 
			      C   IFIDNI <fmt>,<I>      ;; I - write signed Integer
			      C     mov eax,edx         ;; get signed
			      C     call WriteInt
			      C     mWrite "d  "
			      C   ENDIF
			      C 
			      C   IFIDNI <fmt>,<B>      ;; B - write unsigned binary
			      C     mov eax,ecx         ;; get unsigned
			      C     mov ebx,MSHOWITSNAMETYPE
			      C     call WriteBinB      ;; display binary
			      C     mWrite "b  "
			      C   ENDIF
			      C 
			      C   IFIDNI <fmt>,<N>      ;; N - write new line
			      C     call Crlf
			      C   ENDIF
			      C 
			      C ENDM ;end FORC
			      C 
			      C 	popad
			      C ENDM 	;; end mShow macro
			      C 
			      C ;---------------------------------------------------
			      C mShowRegister MACRO regName, regValue
			      C LOCAL tempStr
			      C ;
			      C ; Displays a 32-bit register name and contents.
			      C ; Receives: the register name, the register value.
			      C ;---------------------------------------------------
			      C .data
			      C tempStr BYTE "  &regName=",0
			      C .code
			      C 	push eax
			      C 
			      C ; Display the register name
			      C 	push	edx
			      C 	mov	edx,OFFSET tempStr
			      C 	call	WriteString
			      C 	pop	edx
			      C 
			      C ; Display the register contents
			      C 	mov	eax,regValue
			      C 	call	WriteHex
			      C 	pop	eax
			      C ENDM
			      C 
			      C ;------------------------------------------------------
			      C mWrite MACRO text:REQ
			      C ;
			      C ; Writes a string literal to standard output.
			      C ; Receives: a string enclosed in single or double 
			      C ;   quotes (null terminator not required).
			      C ;------------------------------------------------------
			      C LOCAL string
			      C 	.data		; local data
			      C 	string BYTE text,0	;; define the string
			      C 	.code
			      C 	push	edx
			      C 	mov	edx,OFFSET string
			      C 	call	WriteString
			      C 	pop	edx
			      C ENDM
			      C 
			      C ;------------------------------------------------------
			      C mWriteLn MACRO text:REQ
			      C ;
			      C ; Writes a string literal to standard output, followined by Crlf
			      C ; Receives: a string enclosed in single or double 
			      C ;   quotes (null terminator not required).
			      C ; DEPRECATED in the Fifth edition.
			      C ;------------------------------------------------------
			      C 	mWrite text
			      C 	call	Crlf
			      C ENDM
			      C 
			      C ;------------------------------------------------------
			      C mWriteSpace MACRO count:=<1>
			      C ;
			      C ; Writes one or more spaces to standard output.
			      C ; Receives: an integer specifying the number of spaces.
			      C ;   If count is blank, a single space is written.
			      C ;------------------------------------------------------
			      C LOCAL spaces
			      C .data
			      C spaces BYTE count DUP(' '),0
			      C .code
			      C 	push	edx
			      C 	mov	edx,OFFSET spaces
			      C 	call	WriteString
			      C 	pop	edx
			      C ENDM
			      C 
			      C ;------------------------------------------------------
			      C mWriteString MACRO buffer:REQ
			      C ;
			      C ; Writes a string variable to standard output.
			      C ; Receives: string variable name.
			      C ;------------------------------------------------------
			      C 	push edx
			      C 	mov  edx,OFFSET buffer
			      C 	call WriteString
			      C 	pop  edx
			      C ENDM
			      C 
			      C 
			      C Startup MACRO
			      C 	IF IsDefined( RealMode )
			      C   	  mov ax,@data
			      C 	  mov ds,ax
			      C 	ENDIF
			      C ENDM
			      C 
			      C ;----------------------------------------------------------------------
			      C ; We may later decide to add some macros that are specific to 32-bit
			      C ; mode, or to 16-bit mode. The @MODEL value is defined either by
			      C ; Irvine16.inc or by Irvine32.inc, when they use the .MODEL directive.
			      C ;----------------------------------------------------------------------
			      C 
			      C IFDEF @MODEL	; @MODEL defined?
			      C 	IF @MODEL EQ 7	; 32-bit unique macros begin here...
			      C 
			      C 	ELSE	; 16-bit unique macros begin here...
			      C 	ENDIF	; IF @MODEL...
			      C ENDIF	; IFNDEF @MODEL
			      C 
			      C .LIST
			      C 

 00000019			STUDENT STRUCT
 00000000  00000009 [			id		BYTE 9 DUP(?)
	    00
	   ]
 03740003  00000006 [			stuname	BYTE 6 DUP(?)
	    00
	   ]
 06E80006  00000006 [			address	BYTE 6 DUP(?)
	    00
	   ]
 0A5C0009  00				score1	BYTE ?
 0A5C000A  00				score2	BYTE ?
 0A5C000B  00				score3	BYTE ?
 0A5C000C  00				score4	BYTE ?
				STUDENT ENDS
 = 0000002E			BUFFER_SIZE = 46

				mWritenChar PROTO, source:PTR BYTE, count:DWORD
				showrecord PROTO, point:PTR STUDENT
				nrecordshow PROTO, point: PTR STUDENT, count:DWORD
				findrecord PROTO, target:PTR STUDENT, nofstu:DWORD, pattern:PTR BYTE, nchar:DWORD, result:PTR DWORD
				scoremean PROTO, target:PTR STUDENT, nofstu:DWORD, displacement:DWORD

 00000000			.data
 00000000  0000002E [		buffer		STUDENT BUFFER_SIZE DUP(<>)
	    00000009 [
	     00
	    ]
	    00000006 [
	     00
	    ]
	    00000006 [
	     00
	    ] 00 00 00 00
	   ]
 0000047E 74 65 73 74 64	filename	BYTE "testdata.txt", 0
	   61 74 61 2E 74
	   78 74 00
 0000048B 00000000		fileHandle	HANDLE ?
 0000048F 00000000		stucount	DWORD ?
 00000493 00000000		found		DWORD ?
 00000497  0000000A [		dest		BYTE 10 DUP(0)
	    00
	   ]
 000004A1 00000000		destcount	DWORD ?
 000004A5  0000000A [		city		BYTE 10 DUP(0)
	    00
	   ]
 000004AF 00000000		citycount	DWORD ?
 000004B3 00000000		tempaddr	DWORD ?

 00000000			.code
 00000000			main PROC
 00000000  BA 0000047E R		mov edx, offset filename
 00000005  E8 00000000 E		call OpenInputFile
 0000000A  A3 0000048B R		mov fileHandle, eax

 0000000F  83 F8 FF			cmp eax, INVALID_HANDLE_VALUE
 00000012  75 16			jne file_ok
					mWriteLn "Cannot open file"
 000004B7		     2		.data		
 000004B7 43 61 6E 6E 6F     2		??0000 BYTE "Cannot open file",0	
	   74 20 6F 70 65
	   6E 20 66 69 6C
	   65 00
 00000014		     2		.code
 00000014  52		     2		push	edx
 00000015  BA 000004B7 R     2		mov	edx,OFFSET ??0000
 0000001A  E8 00000000 E     2		call	WriteString
 0000001F  5A		     2		pop	edx
 00000020  E8 00000000 E     1		call	Crlf
 00000025  E9 00000294			jmp quit

 0000002A			file_ok:
 0000002A  BA 00000000 R		mov edx, offset buffer
 0000002F  B9 0000047E			mov ecx, sizeof buffer
 00000034  E8 00000000 E		call ReadFromFile
 00000039  73 13			jnc buf_read_ok
					mWriteLn "Error reading file."
 000004C8		     2		.data		
 000004C8 45 72 72 6F 72     2		??0001 BYTE "Error reading file.",0	
	   20 72 65 61 64
	   69 6E 67 20 66
	   69 6C 65 2E 00
 0000003B		     2		.code
 0000003B  52		     2		push	edx
 0000003C  BA 000004C8 R     2		mov	edx,OFFSET ??0001
 00000041  E8 00000000 E     2		call	WriteString
 00000046  5A		     2		pop	edx
 00000047  E8 00000000 E     1		call	Crlf
 0000004C  EB 44			jmp close_file

 0000004E			buf_read_ok:
					mWrite "File size: "
 000004DC		     1		.data		
 000004DC 46 69 6C 65 20     1		??0002 BYTE "File size: ",0	
	   73 69 7A 65 3A
	   20 00
 0000004E		     1		.code
 0000004E  52		     1		push	edx
 0000004F  BA 000004DC R     1		mov	edx,OFFSET ??0002
 00000054  E8 00000000 E     1		call	WriteString
 00000059  5A		     1		pop	edx
 0000005A  E8 00000000 E		call WriteDec
					mWrite " Bytes,    "
 000004E8		     1		.data		
 000004E8 20 42 79 74 65     1		??0003 BYTE " Bytes,    ",0	
	   73 2C 20 20 20
	   20 00
 0000005F		     1		.code
 0000005F  52		     1		push	edx
 00000060  BA 000004E8 R     1		mov	edx,OFFSET ??0003
 00000065  E8 00000000 E     1		call	WriteString
 0000006A  5A		     1		pop	edx
 0000006B  BA 00000000			mov edx, 0
 00000070  BB 00000019			mov ebx, sizeof STUDENT
 00000075  F7 F3			div ebx
 00000077  A3 0000048F R		mov stucount, eax
 0000007C  E8 00000000 E		call WriteDec
					mWrite " student's data input..."
 000004F4		     1		.data		
 000004F4 20 73 74 75 64     1		??0004 BYTE " student's data input...",0	
	   65 6E 74 27 73
	   20 64 61 74 61
	   20 69 6E 70 75
	   74 2E 2E 2E 00
 00000081		     1		.code
 00000081  52		     1		push	edx
 00000082  BA 000004F4 R     1		mov	edx,OFFSET ??0004
 00000087  E8 00000000 E     1		call	WriteString
 0000008C  5A		     1		pop	edx
 0000008D  E8 00000000 E		call Crlf

 00000092			close_file:
 00000092  A1 0000048B R		mov eax, fileHandle
 00000097  E8 00000000 E		call CloseFile

 0000009C			MENU:
 0000009C  E8 00000000 E		call Crlf
					mWriteLn "(1) ¥þ³¡Åã¥Ü (2) ¦¨ÁZ²Î­p (3) ©m¦W·j´M (4) «°¥«·j´M (5) µ²§ô"
 0000050D		     2		.data		
 0000050D 28 31 29 20 A5     2		??0005 BYTE "(1) ¥þ³¡Åã¥Ü (2) ¦¨ÁZ²Î­p (3) ©m¦W·j´M (4) «°¥«·j´M (5) µ²§ô",0	
	   FE B3 A1 C5 E3
	   A5 DC 20 28 32
	   29 20 A6 A8 C1
	   5A B2 CE AD 70
	   20 28 33 29 20
	   A9 6D A6 57 B7
	   6A B4 4D 20 28
	   34 29 20 AB B0
	   A5 AB B7 6A B4
	   4D 20 28 35 29
	   20 B5 B2 A7 F4
	   00
 000000A1		     2		.code
 000000A1  52		     2		push	edx
 000000A2  BA 0000050D R     2		mov	edx,OFFSET ??0005
 000000A7  E8 00000000 E     2		call	WriteString
 000000AC  5A		     2		pop	edx
 000000AD  E8 00000000 E     1		call	Crlf
					mChoose 5
 000000B2		     1	MC1:
 000000B2  E8 00000000 E     1		call Crlf
 0000054A		     2		.data		
 0000054A BD D0 BF E9 A4     2		??0006 BYTE "½Ð¿é¤J¿ï¾Ü: ",0	
	   4A BF EF BE DC
	   3A 20 00
 000000B7		     2		.code
 000000B7  52		     2		push	edx
 000000B8  BA 0000054A R     2		mov	edx,OFFSET ??0006
 000000BD  E8 00000000 E     2		call	WriteString
 000000C2  5A		     2		pop	edx
 000000C3  B8 00000000	     1		mov eax, 0
 000000C8  E8 00000000 E     1		call ReadChar
 000000CD  E8 00000000 E     1		call WriteChar
 000000D2  2C 30	     1		sub al, 30h
 00000557		     2		.data		
 00000557 20 20 20 20 57     2		??0007 BYTE "    Wrong selection",0	
	   72 6F 6E 67 20
	   73 65 6C 65 63
	   74 69 6F 6E 00
 000000DC		     2		.code
 000000DC  52		     2		push	edx
 000000DD  BA 00000557 R     2		mov	edx,OFFSET ??0007
 000000E2  E8 00000000 E     2		call	WriteString
 000000E7  5A		     2		pop	edx
 000000E8  EB C8	     1			jmp MC1
 000000EA  E8 00000000 E		call Crlf
					.IF al == 1
						invoke nrecordshow, ADDR buffer, BUFFER_SIZE
					.ELSEIF al == 2
						mWrite "score1 ªº"
 0000056B		     1		.data		
 0000056B 73 63 6F 72 65     1		??0008 BYTE "score1 ªº",0	
	   31 20 AA BA 00
 00000108		     1		.code
 00000108  52		     1		push	edx
 00000109  BA 0000056B R     1		mov	edx,OFFSET ??0008
 0000010E  E8 00000000 E     1		call	WriteString
 00000113  5A		     1		pop	edx
						invoke scoremean, ADDR buffer, BUFFER_SIZE, OFFSET STUDENT.score1
						mWrite "score2 ªº"
 00000575		     1		.data		
 00000575 73 63 6F 72 65     1		??0009 BYTE "score2 ªº",0	
	   32 20 AA BA 00
 00000122		     1		.code
 00000122  52		     1		push	edx
 00000123  BA 00000575 R     1		mov	edx,OFFSET ??0009
 00000128  E8 00000000 E     1		call	WriteString
 0000012D  5A		     1		pop	edx
						invoke scoremean, ADDR buffer, BUFFER_SIZE, OFFSET STUDENT.score2
						mWrite "score3 ªº"
 0000057F		     1		.data		
 0000057F 73 63 6F 72 65     1		??000A BYTE "score3 ªº",0	
	   33 20 AA BA 00
 0000013C		     1		.code
 0000013C  52		     1		push	edx
 0000013D  BA 0000057F R     1		mov	edx,OFFSET ??000A
 00000142  E8 00000000 E     1		call	WriteString
 00000147  5A		     1		pop	edx
						invoke scoremean, ADDR buffer, BUFFER_SIZE, OFFSET STUDENT.score3
						mWrite "score4 ªº"
 00000589		     1		.data		
 00000589 73 63 6F 72 65     1		??000B BYTE "score4 ªº",0	
	   34 20 AA BA 00
 00000156		     1		.code
 00000156  52		     1		push	edx
 00000157  BA 00000589 R     1		mov	edx,OFFSET ??000B
 0000015C  E8 00000000 E     1		call	WriteString
 00000161  5A		     1		pop	edx
						invoke scoremean, ADDR buffer, BUFFER_SIZE, OFFSET STUDENT.score4
					.ELSEIF al == 3
						mWrite "½Ð¿é¤J©m¦W: "
 00000593		     1		.data		
 00000593 BD D0 BF E9 A4     1		??000C BYTE "½Ð¿é¤J©m¦W: ",0	
	   4A A9 6D A6 57
	   3A 20 00
 00000179		     1		.code
 00000179  52		     1		push	edx
 0000017A  BA 00000593 R     1		mov	edx,OFFSET ??000C
 0000017F  E8 00000000 E     1		call	WriteString
 00000184  5A		     1		pop	edx
						mReadString dest
 00000185  51		     1		push ecx
 00000186  52		     1		push edx
 00000187  BA 00000497 R     1		mov  edx,OFFSET dest
 0000018C  B9 0000000A	     1		mov  ecx,SIZEOF dest
 00000191  E8 00000000 E     1		call ReadString
 00000196  5A		     1		pop  edx
 00000197  59		     1		pop  ecx
 00000198  A3 000004A1 R			mov destcount, eax
 0000019D  E8 00000000 E			call Crlf
 000001A2  B8 00000000 R			mov eax, offset buffer
 000001A7  83 C0 09				add eax, offset STUDENT.stuname
						invoke findrecord, eax, BUFFER_SIZE, ADDR dest, destcount, ADDR found
 000001C2  8B 1D 00000493 R			mov ebx, found
						.IF ebx == 0ffffffffh
							mWrite "not found"
 000005A0		     1		.data		
 000005A0 6E 6F 74 20 66     1		??000D BYTE "not found",0	
	   6F 75 6E 64 00
 000001CD		     1		.code
 000001CD  52		     1		push	edx
 000001CE  BA 000005A0 R     1		mov	edx,OFFSET ??000D
 000001D3  E8 00000000 E     1		call	WriteString
 000001D8  5A		     1		pop	edx
						.ELSE
 000001DB  B8 00000000 R				mov eax, offset buffer
 000001E0  03 05 00000493 R				add eax, found
							invoke showrecord, eax
						.ENDIF
 000001EC  E8 00000000 E			call Crlf
					.ELSEIF al == 4
						mWrite "½Ð¿é¤J«°¥«: "
 000005AA		     1		.data		
 000005AA BD D0 BF E9 A4     1		??000E BYTE "½Ð¿é¤J«°¥«: ",0	
	   4A AB B0 A5 AB
	   3A 20 00
 000001FE		     1		.code
 000001FE  52		     1		push	edx
 000001FF  BA 000005AA R     1		mov	edx,OFFSET ??000E
 00000204  E8 00000000 E     1		call	WriteString
 00000209  5A		     1		pop	edx
						mReadString city
 0000020A  51		     1		push ecx
 0000020B  52		     1		push edx
 0000020C  BA 000004A5 R     1		mov  edx,OFFSET city
 00000211  B9 0000000A	     1		mov  ecx,SIZEOF city
 00000216  E8 00000000 E     1		call ReadString
 0000021B  5A		     1		pop  edx
 0000021C  59		     1		pop  ecx
 0000021D  A3 000004AF R			mov citycount, eax
 00000222  E8 00000000 E			call Crlf
 00000227  BB 0000002E				mov ebx, BUFFER_SIZE
 0000022C  B8 00000000 R			mov eax, offset buffer
 00000231  A3 000004B3 R			mov tempaddr, eax
 00000236			L0:
 00000236  83 C0 0F				add eax, offset STUDENT.address
						invoke findrecord, eax, ebx, ADDR city, citycount, ADDR found
 00000250  8B 15 00000493 R			mov edx, found
						.IF edx != 0ffffffffh
 0000025B  A1 000004B3 R				mov eax, tempaddr
 00000260  03 05 00000493 R				add eax, found
 00000266  83 C0 19					add eax, SIZEOF STUDENT
 00000269  A3 000004B3 R				mov tempaddr, eax
 0000026E  83 E8 19					sub eax, SIZEOF STUDENT
							invoke showrecord, eax
 00000277  E8 00000000 E				call Crlf
 0000027C  B9 00000019					mov ecx, sizeof STUDENT
 00000281  A1 00000493 R				mov eax, found
 00000286  BA 00000000					mov edx, 0
 0000028B  F7 F1					div ecx
 0000028D  40						inc eax
 0000028E  2B D8					sub ebx, eax
 00000290  0F 84 FFFFFE06				jz MENU
 00000296  A1 000004B3 R				mov eax, tempaddr
 0000029B  EB 99					jmp L0
						.ELSEIF ebx == BUFFER_SIZE
							mWrite "not found"
 000005B7		     1		.data		
 000005B7 6E 6F 74 20 66     1		??000F BYTE "not found",0	
	   6F 75 6E 64 00
 000002A4		     1		.code
 000002A4  52		     1		push	edx
 000002A5  BA 000005B7 R     1		mov	edx,OFFSET ??000F
 000002AA  E8 00000000 E     1		call	WriteString
 000002AF  5A		     1		pop	edx
						.ENDIF
 000002B0  E8 00000000 E			call Crlf
					.ELSE
 000002B7  EB 05				jmp quit
					.ENDIF
 000002B9  E9 FFFFFDDE			jmp MENU

 000002BE			quit:
 000002BE  E8 00000000 E		call WaitMsg
					invoke ExitProcess, 0
 000002CA			main ENDP

 000002CA			scoremean PROC uses ecx edx eax ebx esi,
							target:PTR STUDENT, nofstu:DWORD, displacement:DWORD
 000002D2  8B 4D 0C			mov ecx, nofstu
 000002D5  BA 00000000			mov edx, 0
 000002DA  B8 00000000			mov eax, 0
 000002DF  BB 00000000			mov ebx, 0
 000002E4  8B 75 08			mov esi, target
 000002E7  03 75 10			add esi, displacement
 000002EA			SM1:
 000002EA  8A 1E			mov bl, byte ptr [esi]
 000002EC  03 C3			add eax, ebx
 000002EE  83 C6 19			add esi, sizeof STUDENT
 000002F1  E2 F7			loop SM1
 000002F3  8B 4D 0C			mov ecx, nofstu
 000002F6  F7 F1			div ecx
					mWrite "¥­§¡­È: "
 000005C1		     1		.data		
 000005C1 A5 AD A7 A1 AD     1		??0010 BYTE "¥­§¡­È: ",0	
	   C8 3A 20 00
 000002F8		     1		.code
 000002F8  52		     1		push	edx
 000002F9  BA 000005C1 R     1		mov	edx,OFFSET ??0010
 000002FE  E8 00000000 E     1		call	WriteString
 00000303  5A		     1		pop	edx
 00000304  E8 00000000 E		call WriteDec
					mWriteSpace 3
 000005CA		     1	.data
 000005CA  00000003 [	     1	??0011 BYTE 3 DUP(' '),0
	    20
	   ] 00
 00000309		     1	.code
 00000309  52		     1		push	edx
 0000030A  BA 000005CA R     1		mov	edx,OFFSET ??0011
 0000030F  E8 00000000 E     1		call	WriteString
 00000314  5A		     1		pop	edx
 00000315  8B C2			mov eax, edx
					mWrite "¾l¼Æ: "
 000005CE		     1		.data		
 000005CE BE 6C BC C6 3A     1		??0012 BYTE "¾l¼Æ: ",0	
	   20 00
 00000317		     1		.code
 00000317  52		     1		push	edx
 00000318  BA 000005CE R     1		mov	edx,OFFSET ??0012
 0000031D  E8 00000000 E     1		call	WriteString
 00000322  5A		     1		pop	edx
 00000323  E8 00000000 E		call WriteDec
 00000328  E8 00000000 E		call Crlf
					ret
 00000336			scoremean ENDP

 00000336			findrecord PROC uses esi edi ebx ecx edx,
						target:PTR STUDENT, nofstu:DWORD, pattern:PTR BYTE, nchar:DWORD, result:PTR DWORD
 0000033E  FC				cld
 0000033F  8B 75 18			mov esi, result
 00000342  C7 06 FFFFFFFF		mov dword ptr [esi], 0ffffffffh
 00000348  BA 00000000			mov edx, 0
 0000034D  8B 5D 0C			mov ebx, nofstu
 00000350			FR1:
 00000350  8B 75 08			mov esi, target
 00000353  03 F2			add esi, edx
 00000355  8B 7D 10			mov edi, pattern
 00000358  8B 4D 14			mov ecx, nchar
 0000035B  F3/ A6			repe cmpsb
 0000035D  74 08			jz MATCH
 0000035F  83 C2 19			add edx, sizeof STUDENT
 00000362  4B				dec ebx
 00000363  75 EB			jnz FR1
 00000365  EB 05			jmp QUIT
 00000367			MATCH:
 00000367  8B 75 18			mov esi, result
 0000036A  89 16			mov dword ptr [esi], edx
 0000036C			QUIT:
					ret
 00000375			findrecord ENDP

 00000375			nrecordshow PROC uses ecx edi,
								point:PTR STUDENT, count:DWORD

 0000037A  8B 4D 0C			mov ecx, count
 0000037D  8B 7D 08			mov edi, point
 00000380			AA1:
					invoke showrecord, edi
 00000386  E8 00000000 E		call Crlf
 0000038B  83 C7 19			add edi, SIZEOF STUDENT
 0000038E  E2 F0			loop AA1

					ret
 00000396			nrecordshow ENDP

 00000396			showrecord PROC uses edi,
								point:PTR STUDENT

 0000039A  8B 7D 08			mov edi, point
					invoke mWritenChar, edi, SIZEOF STUDENT.id
					mWriteSpace 3
 000005D5		     1	.data
 000005D5  00000003 [	     1	??0013 BYTE 3 DUP(' '),0
	    20
	   ] 00
 000003A5		     1	.code
 000003A5  52		     1		push	edx
 000003A6  BA 000005D5 R     1		mov	edx,OFFSET ??0013
 000003AB  E8 00000000 E     1		call	WriteString
 000003B0  5A		     1		pop	edx
 000003B1  83 C7 09			add edi, SIZEOF STUDENT.id
					invoke mWritenChar, edi, sizeof STUDENT.stuname
					mWriteSpace 3
 000005D9		     1	.data
 000005D9  00000003 [	     1	??0014 BYTE 3 DUP(' '),0
	    20
	   ] 00
 000003BC		     1	.code
 000003BC  52		     1		push	edx
 000003BD  BA 000005D9 R     1		mov	edx,OFFSET ??0014
 000003C2  E8 00000000 E     1		call	WriteString
 000003C7  5A		     1		pop	edx
 000003C8  83 C7 06			add edi, sizeof STUDENT.stuname
					invoke mWritenChar, edi, sizeof STUDENT.address
					mWriteSpace 3
 000005DD		     1	.data
 000005DD  00000003 [	     1	??0015 BYTE 3 DUP(' '),0
	    20
	   ] 00
 000003D3		     1	.code
 000003D3  52		     1		push	edx
 000003D4  BA 000005DD R     1		mov	edx,OFFSET ??0015
 000003D9  E8 00000000 E     1		call	WriteString
 000003DE  5A		     1		pop	edx
 000003DF  83 C7 06			add edi, sizeof STUDENT.address
 000003E2  B8 00000000			mov eax, 0
 000003E7  8A 07			mov al, byte ptr [edi]
 000003E9  E8 00000000 E		call WriteDec
					mWriteSpace 3
 000005E1		     1	.data
 000005E1  00000003 [	     1	??0016 BYTE 3 DUP(' '),0
	    20
	   ] 00
 000003EE		     1	.code
 000003EE  52		     1		push	edx
 000003EF  BA 000005E1 R     1		mov	edx,OFFSET ??0016
 000003F4  E8 00000000 E     1		call	WriteString
 000003F9  5A		     1		pop	edx
 000003FA  47				inc edi
 000003FB  8A 07			mov al, byte ptr [edi]
 000003FD  E8 00000000 E		call WriteDec
					mWriteSpace 3
 000005E5		     1	.data
 000005E5  00000003 [	     1	??0017 BYTE 3 DUP(' '),0
	    20
	   ] 00
 00000402		     1	.code
 00000402  52		     1		push	edx
 00000403  BA 000005E5 R     1		mov	edx,OFFSET ??0017
 00000408  E8 00000000 E     1		call	WriteString
 0000040D  5A		     1		pop	edx
 0000040E  47				inc edi
 0000040F  8A 07			mov al, byte ptr [edi]
 00000411  E8 00000000 E		call WriteDec
					mWriteSpace 3
 000005E9		     1	.data
 000005E9  00000003 [	     1	??0018 BYTE 3 DUP(' '),0
	    20
	   ] 00
 00000416		     1	.code
 00000416  52		     1		push	edx
 00000417  BA 000005E9 R     1		mov	edx,OFFSET ??0018
 0000041C  E8 00000000 E     1		call	WriteString
 00000421  5A		     1		pop	edx
 00000422  47				inc edi
 00000423  8A 07			mov al, byte ptr [edi]
 00000425  E8 00000000 E		call WriteDec
					mWriteSpace 3
 000005ED		     1	.data
 000005ED  00000003 [	     1	??0019 BYTE 3 DUP(' '),0
	    20
	   ] 00
 0000042A		     1	.code
 0000042A  52		     1		push	edx
 0000042B  BA 000005ED R     1		mov	edx,OFFSET ??0019
 00000430  E8 00000000 E     1		call	WriteString
 00000435  5A		     1		pop	edx
					
					ret
 0000043B			showrecord ENDP

 0000043B			mWritenChar PROC uses esi edi ecx edx,
								source:PTR BYTE, count:DWORD

 000005F1			.data
 000005F1  00000009 [			spaces BYTE 9 DUP(?)
	    00
	   ]
 00000442			.code
 00000442  FC				cld
 00000443  BF 000005F1 R		mov edi, offset spaces
 00000448  B9 00000009			mov ecx, 9
 0000044D  B0 00			mov al, 0
 0000044F  F3/ AA			rep stosb
 00000451  8B 75 08			mov esi, source
 00000454  BF 000005F1 R		mov edi, offset spaces
 00000459  8B 4D 0C			mov ecx, count
 0000045C  F3/ A4			rep movsb
 0000045E  BA 000005F1 R		mov edx, offset spaces
 00000463  E8 00000000 E		call WriteString
					ret
 00000470			mWritenChar ENDP

				END main
Microsoft (R) Macro Assembler Version 14.14.26429.4	    12/17/18 12:20:57
U10516045_ch10_1.asm					     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mChoose  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
STUDENT  . . . . . . . . . . . .	 00000019
  id . . . . . . . . . . . . . .	 00000000	 Byte
  stuname  . . . . . . . . . . .	 00000009	 Byte
  address  . . . . . . . . . . .	 0000000F	 Byte
  score1 . . . . . . . . . . . .	 00000015	 Byte
  score2 . . . . . . . . . . . .	 00000016	 Byte
  score3 . . . . . . . . . . . .	 00000017	 Byte
  score4 . . . . . . . . . . . .	 00000018	 Byte
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000005FA DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000470 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
findrecord . . . . . . . . . . .	P Near	 00000336 _TEXT	Length= 0000003F Public STDCALL
  target . . . . . . . . . . . .	DWord	 bp + 00000008
  nofstu . . . . . . . . . . . .	DWord	 bp + 0000000C
  pattern  . . . . . . . . . . .	DWord	 bp + 00000010
  nchar  . . . . . . . . . . . .	DWord	 bp + 00000014
  result . . . . . . . . . . . .	DWord	 bp + 00000018
  FR1  . . . . . . . . . . . . .	L Near	 00000350 _TEXT	
  MATCH  . . . . . . . . . . . .	L Near	 00000367 _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 0000036C _TEXT	
mWritenChar  . . . . . . . . . .	P Near	 0000043B _TEXT	Length= 00000035 Public STDCALL
  source . . . . . . . . . . . .	DWord	 bp + 00000008
  count  . . . . . . . . . . . .	DWord	 bp + 0000000C
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000002CA Public STDCALL
  file_ok  . . . . . . . . . . .	L Near	 0000002A _TEXT	
  buf_read_ok  . . . . . . . . .	L Near	 0000004E _TEXT	
  close_file . . . . . . . . . .	L Near	 00000092 _TEXT	
  MENU . . . . . . . . . . . . .	L Near	 0000009C _TEXT	
  MC1  . . . . . . . . . . . . .	L Near	 000000B2 _TEXT	
  L0 . . . . . . . . . . . . . .	L Near	 00000236 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 000002BE _TEXT	
nrecordshow  . . . . . . . . . .	P Near	 00000375 _TEXT	Length= 00000021 Public STDCALL
  point  . . . . . . . . . . . .	DWord	 bp + 00000008
  count  . . . . . . . . . . . .	DWord	 bp + 0000000C
  AA1  . . . . . . . . . . . . .	L Near	 00000380 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scoremean  . . . . . . . . . . .	P Near	 000002CA _TEXT	Length= 0000006C Public STDCALL
  target . . . . . . . . . . . .	DWord	 bp + 00000008
  nofstu . . . . . . . . . . . .	DWord	 bp + 0000000C
  displacement . . . . . . . . .	DWord	 bp + 00000010
  SM1  . . . . . . . . . . . . .	L Near	 000002EA _TEXT	
showrecord . . . . . . . . . . .	P Near	 00000396 _TEXT	Length= 000000A5 Public STDCALL
  point  . . . . . . . . . . . .	DWord	 bp + 00000008
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 000004B7 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 000004C8 _DATA	
??0002 . . . . . . . . . . . . .	Byte	 000004DC _DATA	
??0003 . . . . . . . . . . . . .	Byte	 000004E8 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 000004F4 _DATA	
??0005 . . . . . . . . . . . . .	Byte	 0000050D _DATA	
??0006 . . . . . . . . . . . . .	Byte	 0000054A _DATA	
??0007 . . . . . . . . . . . . .	Byte	 00000557 _DATA	
??0008 . . . . . . . . . . . . .	Byte	 0000056B _DATA	
??0009 . . . . . . . . . . . . .	Byte	 00000575 _DATA	
??000A . . . . . . . . . . . . .	Byte	 0000057F _DATA	
??000B . . . . . . . . . . . . .	Byte	 00000589 _DATA	
??000C . . . . . . . . . . . . .	Byte	 00000593 _DATA	
??000D . . . . . . . . . . . . .	Byte	 000005A0 _DATA	
??000E . . . . . . . . . . . . .	Byte	 000005AA _DATA	
??000F . . . . . . . . . . . . .	Byte	 000005B7 _DATA	
??0010 . . . . . . . . . . . . .	Byte	 000005C1 _DATA	
??0011 . . . . . . . . . . . . .	Byte	 000005CA _DATA	
??0012 . . . . . . . . . . . . .	Byte	 000005CE _DATA	
??0013 . . . . . . . . . . . . .	Byte	 000005D5 _DATA	
??0014 . . . . . . . . . . . . .	Byte	 000005D9 _DATA	
??0015 . . . . . . . . . . . . .	Byte	 000005DD _DATA	
??0016 . . . . . . . . . . . . .	Byte	 000005E1 _DATA	
??0017 . . . . . . . . . . . . .	Byte	 000005E5 _DATA	
??0018 . . . . . . . . . . . . .	Byte	 000005E9 _DATA	
??0019 . . . . . . . . . . . . .	Byte	 000005ED _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER_SIZE  . . . . . . . . . .	Number	 0000002Eh   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	STUDENT	 00000000 _DATA	
citycount  . . . . . . . . . . .	DWord	 000004AF _DATA	
city . . . . . . . . . . . . . .	Byte	 000004A5 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
destcount  . . . . . . . . . . .	DWord	 000004A1 _DATA	
dest . . . . . . . . . . . . . .	Byte	 00000497 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 0000048B _DATA	
filename . . . . . . . . . . . .	Byte	 0000047E _DATA	
found  . . . . . . . . . . . . .	DWord	 00000493 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
spaces . . . . . . . . . . . . .	Byte	 000005F1 _DATA	
stucount . . . . . . . . . . . .	DWord	 0000048F _DATA	
tempaddr . . . . . . . . . . . .	DWord	 000004B3 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
